CURRENT: MISC
** acceptance test: setup fmm operators for python wrapper
** remove the double underscore if the ifdefs
** test_dense_builder should be split up

KERNEL OVERHAUL
** capacity test: benchmark the fmm
** move obs, src loop into the kernel functions which will reduce the number of function calls and also allow sse/avx implementations of those kernel functions
** if a large number of obs and src points are passed to the kernel functions simultaneously, then maybe the output can simply be a vector rather than using the templated tensor arrays
** AVX kernel implementation
** GPU kernel implementation

NEXT: hanging nodes 
** acceptance test #1: fault intersecting surface not at point
** acceptance test #2: adaptively refined okada solution (using the real error as the refinement criterion, so not technically adaptive meshing yet)
** octree for balls (circles, spheres)
** nearest_neighbors for point->triangle or triangle->triangle intersection
** Handle the general case when fault-surface intersection does not occur at a vertex.
-- Linked to hanging nodes in that lots of geometry code needs to be used/written.
-- (DD) Should I use CGAL or other comp-geom library (write a note on the decision)

INTEGRATION:
** acceptance test: 3D problem with sinh-sigmoidal quadrature
** capacity test: time to perform 3D nearfield integration
** try other nearly-singular quadrature methods (not sinh-sigmoidal)

CRACK TIPS:
** crack tip elements may require creating a basis structure
** acceptance test: high accuracy crack tip stress intensity factor (crack-tip elements)

MISC:
** characterize the sinh-sigmoidal method
** use iterators for traversing point sets?
** characterize the galerkin BEM for hypersingular kernels
** split out the fmm scheduler/traversal
** create a continuity builder struct, move continuity builder stuff to cpp file
-- this may imply using a struct or redesigning the interface
** BUILTIN_FLOAT_DTYPE(16) in boost_numpy fails on odyssey
** test the build system on a fresh ubuntu (just use a docker container)
** automated build testing on mac, ubuntu, with clang, gcc, intel compilers -- maybe turn the mac mini into a build server
http://www.joelonsoftware.com/articles/fog0000000023.html
** some simple capacity tests. how to make sure these run in the same conditions? remove timings from standard unit tests
** add a size function to constraint_matrix for the total number of constraints
