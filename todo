3BEM:
** dense matrix inhomogenous constraint handling
** acceptance test: setup fmm operators for python wrapper, solve a large problem in 2D and confirm (log)linear time cost with refinement
** specify fmm from the python interface -- including the parameters

ELASTIC SOLVER:
** ILU preconditioning
** a systematic golden master testing system?
** tools to test convergence and quadrature orders
** debug the remaining problems with the wedge -- figure out which parts of the matrix don't converge with refinement if any
** refactor the elastic solver to allow identifying which parts of the matrices come from which kernels and obs/src meshes
** setup and do some logging in the elastic solver
--http://victorlin.me/posts/2012/08/26/good-logging-practice-in-python

NEXT: hanging nodes 
** acceptance test #1: fault intersecting surface not at point
** acceptance test #2: adaptively refined okada solution (using the real error as the refinement criterion, so not technically adaptive meshing yet)
** Handle when fault-surface intersection does not occur at a vertex.

KERNEL OVERHAUL
** move obs, src loop into the kernel functions which will reduce the number of function calls and also allow sse/avx implementations of those kernel functions
** if a large number of obs and src points are passed to the kernel functions simultaneously, then maybe the output can simply be a vector rather than using the templated tensor arrays
** remove the templating on kernel tensor shape in favor of returning a large double array from a kernel function called with a bunch of inputs simultaneously
** faster (AVX, GPU) kernel implementations + capacity test

INTEGRATION:
** think about and implement a interpolation test for the singular integration, can this be precomputed?
** acceptance test: 3D problem with sinh-sigmoidal quadrature
** try other nearly-singular quadrature methods (not sinh-sigmoidal)

MISC:
** systematic tests and understanding for the 3D sinh-sigmoidal method
** use iterators for traversing point sets?
** characterize the galerkin BEM for hypersingular kernels
** split out the fmm scheduler/traversal
** create a continuity builder struct, move continuity builder stuff to cpp file
** BUILTIN_FLOAT_DTYPE(16) in boost_numpy fails on odyssey
** automated testing tools against pdetool? -- probably excessive

COMPILER:
** clang openmp problem?
** https://github.com/progschj/ThreadPool looks like a good alternative to openmp that would get me using c++11 threads instead which provide a lot more flexibility, also would work on clang!
** start using clang as the primary compiler because it compiles faster -- faster edit-compile-test cycle!
-- http://petereisentraut.blogspot.com/2011/05/ccache-and-clang.html
-- http://peter.eisentraut.org/blog/2014/12/01/ccache-and-clang-part-3/

