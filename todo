three goals:
1. FASTER. CUT BY A FACTOR OF 10.
** fix the iterative methods
** centralize workload.
-- create a c++ layer dof map.
-- get the mesh_provider.distribute_zeros out of python
** the kernel upgrade work
-- first, redesign to separate (quadrature planning, quadrature, kernels)
-- then make very fast 
** move some of the convergence tests to speed up the unit tests
** why do obs_far_order and obs_near_order need to be the same?
------- maybe:
** remove source constrained dofs?
** integral interpolation idea?

2. GET THE WEDGE MODELS WORKING CORRECTLY.
** fix failure of fault split algo for decelles
** try adaptivity with wedge.py

3. GENERAL PURPOSE ADAPTIVE MESHING.
** design a surface-based input system for elastic
** for 3D: hanging nodes should be relatively easy now that the facet-facet intersection algorithms work well
** acceptance test #2: adaptively refined okada solution (using the real error as the refinement criterion, so not technically adaptive meshing yet)

MISC:
** BUILTIN_FLOAT_DTYPE(16) in boost_numpy fails on odyssey
** logging in the c++ layer, how to integrate with logging in the python layer
** Rename "Op" in elastic to something like "OpWrapper" or "OpAndSpec", or "PyOpWrapper"
** clean up the variable names in compute.py
** kill std::shared_ptr or write a note on why it won't work
** consider changing Mesh to contain separate lists of vertices and triangles
** good new set of test cases: generate tractions and displacement


** extract constraints code into a separate project? with better tests?
** pieces:
-- integration (3bem)
-- constraints (name?)
-- runtime system (name?)
-- elastic solver (name?)
-- KIFMM code (name?)
-- geometry
-- dof handling?
