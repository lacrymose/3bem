CURRENT: 
** fix the octree impossible construction problem
** acceptance test: setup fmm operators for python wrapper, solve a large problem in 2D and confirm (log)linear time cost with refinement
** specify fmm from the python interface -- including the parameters
** fix the singular vs nearfield identification code
** some benchmarking, what is slow?
** replace the dense operator multiply with blas
** think about and implement a interpolation test for the singular integration
** precompute the tasks for FMM, could lead to precomputing a sparse operator

NEXT: hanging nodes 
** acceptance test #1: fault intersecting surface not at point
** acceptance test #2: adaptively refined okada solution (using the real error as the refinement criterion, so not technically adaptive meshing yet)
** Handle when fault-surface intersection does not occur at a vertex.

KERNEL OVERHAUL
** move obs, src loop into the kernel functions which will reduce the number of function calls and also allow sse/avx implementations of those kernel functions
** if a large number of obs and src points are passed to the kernel functions simultaneously, then maybe the output can simply be a vector rather than using the templated tensor arrays
** remove the templating on kernel tensor shape in favor of returning a large double array from a kernel function called with a bunch of inputs simultaneously
** faster (AVX, GPU) kernel implementations + capacity test

INTEGRATION:
** acceptance test: 3D problem with sinh-sigmoidal quadrature
** try other nearly-singular quadrature methods (not sinh-sigmoidal)

MISC:
** characterize the sinh-sigmoidal method
** use iterators for traversing point sets?
** characterize the galerkin BEM for hypersingular kernels
** split out the fmm scheduler/traversal
** create a continuity builder struct, move continuity builder stuff to cpp file
** BUILTIN_FLOAT_DTYPE(16) in boost_numpy fails on odyssey
** automated testing tools against pdetool? -- probably excessive
